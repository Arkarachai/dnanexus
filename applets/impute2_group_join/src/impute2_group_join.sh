#!/bin/bash
# impute2_group_join 0.0.1
# Generated by dx-app-wizard.
#
# Parallelized execution pattern: Your app will generate multiple jobs
# to perform some computation in parallel, followed by a final
# "postprocess" stage that will perform any additional computations as
# necessary.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() or any other entry point is ALWAYS
# executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.
set -x
main() {

    echo "Value of input_prefix1: '${input_prefix1[@]}'"
    echo "Value of input_prefix2: '${input_prefix2[@]}'"
    echo "Value of filter_file: '$filter_file'"
    echo "Value of markers_file: '$markers_file'"
    echo "Value of dupes_prefix: '$dupes_prefix'"
    echo "Value of output_prefix: '$output_prefix'"
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
	mkdir FFILES
	mkdir SFILES
    if [ -n "$filter_file" ]
    then
        dx download "$filter_file" -o filter_file
    fi
    if [ -n "$markers_file" ]
    then
        dx download "$markers_file" -o markers_file
    fi
    for i in ${!input_prefix1[@]}
    do
        #dx describe "${input_prefix[$i]}"
	#mkdir FFILES
	FFILE=$(dx describe --name "${input_prefix1[$i]}")
	dx download "${input_prefix1[$i]}" -o FFILES/$FFILE
    done
    for i in ${!input_prefix1[@]}
    do
        #dx describe "${input_prefi2[$i]}"
	#mkdir SFILES
        SFILE=$(dx describe --name "${input_prefix2[$i]}")
        dx download "${input_prefix2[$i]}" -o SFILES/$SFILE
    done
		#for i in {1..22}
		#do  
			cd FFILES
			for fimpute2 in *.impute2.gz
			do
			FIMPUTE2_BASENAME=$(basename $fimpute2 .impute2.gz|sed 's/[0-9]*$//g')
			echo "$FIMPUTE2_BASENAME"
			done
			#FINFO_BASENAME=$(basename $info $i.impute2_info.gz)
			#echo "$FINFO_BASENAME"
			#done	
			#FSAMPLE_BASENAME=$(basename $FILE $i.phased.sample)
	  		#$FSAMPLE_BASENAME
			cd ../SFILES
                        for simpute2 in *.impute2.gz
			do
			SIMPUTE2_BASENAME=$(basename $simpute2 .impute2.gz|sed 's/[0-9]*$//g')
                        echo "$SIMPUTE2_BASENAME"
			done
                        #SINFO_BASENAME=$(basename $info $i.impute2_info.gz)
                       #echo "$SINFO_BASENAME"
                        #SSAMPLE_BASENAME=$(basename $FILE $i.phased.sample)
                       #echo "$SSAMPLE_BASENAME"
			cd ../
			mkdir output
			for i in {1..22}
			do
			impute2-group-join.py -i FFILES/${FIMPUTE2_BASENAME}${i} SFILES/${SIMPUTE2_BASENAME}${i} -o output/"$output_prefix".$i -d output/"$dupes_prefix".$i	
			done
		for i in output/*.impute2.gz
		do
			impute2_output_files=$(dx upload $i --brief)
	    		dx-jobutil-add-output impute2_output_files "$impute2_output_files" --class=array:file
		done
		for i in output/*.impute2_info.gz
		do
			info_output_files=$(dx upload $i --brief)
			dx-jobutil-add-output info_output_files "$info_output_files" --class=array:file
		done
	#if [ -n "$dupes_prefix.$i.impute2.gz"]
	#then        
	#	dupes_output_files=$(dx upload "$dupes_prefix.$i.impute2.gz" --brief)
    	#	dx-jobutil-add-output dupes_output_files "$dupes_output_files" --class=array:file
	#fi

##done
}

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.
    #
    # Split your work into parallel tasks.  As an example, the
    # following generates 10 subjobs running with the same dummy
    # input.  The utility dx-jobutil-new-job uses the same syntax as
    # dx run for specifying input, and you can explicitly specify the
    # class to enable proper parsing.

    #for i in {1..10}
    #do
    #    process_jobs[$i]=$(dx-jobutil-new-job process -iprocess_input:int=42)
    #done

    # The following line creates the postprocess job that will only
    # run after all of the 10 "process" subjobs are done.
#    postprocess=$(dx-jobutil-new-job postprocess -ipostprocess_input:string=42 --depends-on ${process_jobs[@]})

    # If you would like to include any of the output fields from the
    # postprocess job as the output of your app, you should return it
    # here using a reference.  If the output field in the postprocess
    # function is called "answer", you can set that in the output hash
    # as follows.
    #
    #   dx-jobutil-add-output app_output_field "$postprocess":answer --class=jobref
    #
    # Tip: you can include in your output at this point any open
    # objects (such as gtables) which are closed by another entry
    # point that finishes later.  The system will check to make sure
    # that the output object is closed and will attempt to clone it
    # out as output into the parent container only after all subjobs
    # have finished.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.
#	impute2_output_files=$(dx upload "$output_prefix.$i.impute2.gz" --brief)
#    dx-jobutil-add-output impute2_output_files "$impute2_output_files" --class=file
#	info_output_files=$(dx upload "$output_prefix.$i.impute2_info.gz" --brief)
#    dx-jobutil-add-output info_output_files "$info_output_files" --class=file
#	dupes_output_files=$(dx upload "$dupes_prefix.$i.impute2.gz" --brief)
#    dx-jobutil-add-output dupes_output_files "$dupes_output_files" --class=array:file
#done
#}

#process() {
    # Fill in your process code here
#    echo "Value of process_input: '${process_input}'"
#    dx-jobutil-add-output output null
#}

#postprocess() {
#    # Fill in your postprocess code here
#    echo "Value of postprocess_input: '${postprocess_input}'"
#    dx-jobutil-add-output answer null
#}
