#!/bin/bash
# PLATO_BioBin 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -x

sudo sed -i 's/^# *\(deb .*backports.*\)$/\1/' /etc/apt/sources.list
sudo apt-get update
sudo apt-get install --yes parallel

function run_plato() {

set -x
echo "BINMAP: $1"
OUTDIR=$2
WKDIR=$3
CMD="$4"
COVARF=$5

CIDX=$(echo "$1" | cut -f1)
binf=$(echo "$1" | cut -f2-)

LOAD_COVAR=""
COVAR_CMD=""
if [ -n "$COVARF" ]; then
	COVARIATES="$(head -n 1 "$COVARF" | sed -r 's/[ \t]+/,/g' | cut -d ',' -f 2-)"
	LOAD_COVAR="load-trait --ignore-error --extra-samples --no-fid --missing NA --file $COVARF"
	COVAR_CMD="--covariates \"$COVARIATES\""
fi

LINE="$((7+$(head -20 "$binf" | cut -d, -f1 | grep ' p-value$' | wc -l)))"
eval plato \
         load-trait \
                --ignore-error \
                --dummy-samples \
                --no-fid \
                --missing nan \
                --file <( sed "2,$LINE d" "$binf" | tr ',' ' ') \
        $LOAD_COVAR $CMD --outcome "$(head -1 "$binf" | tr ',' '\n' | head -2 | tail -1)" \
                $COVAR_CMD --exclude-markers \
                --use-traits \
                --output $OUTDIR/output-$CIDX-logistic.txt

}
export -f run_plato

main() {
    export SHELL="/bin/bash"

    echo "Value of covarf: '$covarf'"
    echo "Value of biobin_tar: '$biobin_tar'"
    echo "Value of regression_type: '$regression_type'"
    echo "Value of firth: '$firth'"
    echo "Value of prefix: '$prefix'"

    if test -z "$prefix"; then
        prefix="analysis"
    else
        prefix=$(echo "$prefix" | sed 's|/|_|g')
    fi
    
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".


    WKDIR=$(mktemp -d)
    cd $WKDIR

    dx download "$biobin_tar" -o biobin.tar.bz

	COVARF=""
    if [ -n "$covarf" ]
    then
		COVARF=$(mktemp)
        dx download "$covarf" -f -o $COVARF
    fi
    tar -xjf biobin.tar.bz
	BINLIST=$(mktemp)
	ls -1 biobin/*-bins.csv > $BINLIST
	BINMAPPING=$(mktemp)
	BINLINE=$(cat $BINLIST | wc -l)
	paste <(seq 1 $BINLINE) $BINLIST >$BINMAPPING

	CMD="$regression_type"
	if [ "$regression_type" != "linear" ] && [ "$firth" = "true" ]; then
	CMD="$CMD --firth"
	fi

	OUTDIR=$(mktemp -d)

	parallel --gnu -j $(nproc) run_plato :::: $BINMAPPING ::: $OUTDIR ::: $WKDIR ::: "$CMD" ::: $COVARF


	FINAL_DIR=$(mktemp -d)
	cd $FINAL_DIR
	head -1 $OUTDIR/output-1-logistic.txt > $prefix.plato.txt
	NFIELD=$(head -1 $OUTDIR/output-1-logistic.txt |tr ',' '\n' | wc -l)

	tail -n+2 $OUTDIR/output-*-logistic.txt | grep '.' | sort -t, -gk$NFIELD,$NFIELD | grep -v tmp >> $prefix.plato.txt


    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    plato_output=$(dx upload "$prefix.plato.txt" --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output plato_output "$plato_output" --class=file
}
