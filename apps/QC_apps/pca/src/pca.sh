#!/bin/bash
# pca 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of bed_input: '$bed_input'"
    echo "Value of bim_input: '$bim_input'"
    echo "Value of fam_input: '$fam_input'"
    echo "Value of output_prefix: '$output_prefix'"
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$bed_input" -o bed_input

    dx download "$bim_input" -o bim_input

    dx download "$fam_input" -o fam_input

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    #Check for multi allelic SNPs
    if [[ $(cat bim_input | awk '{if(length($5)>1 || length($6)>1) print "0"}' | wc -l) > 1 ]]
        then
        	printf "It seems data contain multi-allelic varaints! We suggest you to first remove those and re-run PCA.\n\nTo do this:\n1. Extract the list of multi-allelic variants from the bim file: cat filename.bim | awk '{if(length(\$5)>1 || length(\$6)>1) print \$2}' > multi_allelic_variant_list.txt\n2. Create new PLINK file: plink1.90 --bfile filename --exclude multi_allelic_variant_list.txt --make-bed --out filename_new\n3. Run the runQC again with new file as input.\n"
        exit 0;
        fi

        mkdir -p PCA
        mkdir -p 1KG_data
       
 
        echo "FID IID POP" > 1KG_MERGED_CLEAN_PCA.pop
        cat fam_input | awk '{print $1,$2,"User_Data"}' >> 1KG_MERGED_CLEAN_PCA.pop
        for i in ASW 
	#CEU CHB CHS CLM FIN GBR IBS JPT LWK MXL PUR TSI YRI
        do
                 dx download $(dx find data --name "$i".chr*.snps.genotypes.* --project $DX_PROJECT_CONTEXT_ID --brief) -o 1KG_data_"$i"
		mv 1KG_data_"$i" 1KG_data/
		ls -lh 1KG_data/ 
		awk -v x=$i '{print $1,$2,x}' 1KG_data/1KG_data_"$i"_1KG_all_genotype.fam >> 1KG_MERGED_CLEAN_PCA.pop
        #echo $i >> poplist
                for chr in {1..22}
                do
                        #Extact markers from 1000 genomes data for each population
                        plink2 --noweb --bfile 1KG_data_"$i".chr"$chr".snps.genotypes --extract bim_input --maf 0.05 --geno 0.01 --hwe 0.001 --make-bed --out 1KG_data/"$i".chr"$chr"_CLEAN
                        #create a file with merge list for merging all the chromosome
                        echo 1KG_data/"$i".chr"$chr"_CLEAN.bed 1KG_data/"$i".chr"$chr"_CLEAN.bim 1KG_data/"$i".chr"$chr"_CLEAN.fam >> allfiles.txt
                done
        done
        # Merge 1000 Genomes data 
        plink2 --noweb --bfile 1KG_data/ASW.chr1_CLEAN  --merge-list allfiles.txt --make-bed --out 1KG_ALL
        #Merge 1000 genomes and User input data
        plink2 --noweb --bed bed_input --bim bim_input --fam fam_input --bmerge 1KG_ALL.bed 1KG_ALL.bim 1KG_ALL.fam --make-bed --out 1KG_MERGED_RAW

        #To check for strand flip and remove palandromic SNP
        if [ ! -e 1KG_MERGED_RAW-merge.missnp ]
        then
                echo "no missnp file"
                #Get list of Palandromic SNPs
                awk '$5=="C" && $6=="G" || $5=="G" && $6=="C" || $5=="A" && $6=="T" || $5=="T" && $6=="A" {print $2}' 1KG_MERGED_RAW.bim > Palandromic_SNPs.txt
                # Remove Palandromic SNPs
   		plink2 --noweb --bfile 1KG_MERGED_RAW --exclude Palandromic_SNPs.txt --make-bed --out 1KG_MERGED_RAW_FLIP
        else
                echo "missnp file"
                #Get list of Palandromic SNPs
                awk '$5=="C" && $6=="G" || $5=="G" && $6=="C" || $5=="A" && $6=="T" || $5=="T" && $6=="A" {print $2}' bim_input > Palandromic_SNPs.txt
                #Exclude palandromic from input data and flip SNPs strands
                plink2 --noweb --bfile  --exclude Palandromic_SNPs.txt --flip 1KG_MERGED_RAW-merge.missnp --make-bed --out clean_snps_flip
                #Attempt to merge data again
                plink2 --noweb --bfile clean_snps_flip --bmerge 1KG_ALL.bed 1KG_ALL.bim 1KG_ALL.fam --exclude Palandromic_SNPs.txt --make-bed --out 1KG_MERGED_RAW_FLIP
        fi
        if [ -e 1KG_MERGED_RAW_FLIP-merge.missnp ]
        then
                echo "missnp file again!"
                cat 1KG_MERGED_RAW-merge.missnp >> Palandromic_SNPs.txt
                #plink1.90 --noweb --bfile "$filename" --exclude ATCG_SNPs.txt --flip "$filename"_1KG_MERGED_RAW-merge.missnp --make-bed --out "$filename"_clean_snps_flip
                plink2 --noweb --bfile clean_snps_flip --bmerge 1KG_ALL.bed 1KG_ALL.bim 1KG_ALL.fam --exclude Palandromic_SNPs.txt --make-bed --out 1KG_MERGED_RAW_FLIP
        fi

        # Pruning on merged data
        plink2 --noweb --bfile 1KG_MERGED_RAW_FLIP --maf 0.1 --geno 0.01 --hwe 0.001 --indep-pairwise 100 10 0.2 --out 1KG_MERGED_CLEAN
        # 
        plink2 --noweb --bfile 1KG_MERGED_RAW_FLIP --extract 1KG_MERGED_CLEAN.prune.in --make-bed --out 1KG_MERGED_CLEAN_PCA

        # Replace missing phenotype value from "-9" to "1" in order to properly run smartPCA
        sed -i 's/-9$/1/g' 1KG_MERGED_CLEAN_PCA.fam

        # smartPCA parameter file                
        echo "genotypename:     1KG_MERGED_CLEAN_PCA.bed" >  1KG_MERGED_CLEAN_PCA.bed.smartpca.par
        echo "snpname:          1KG_MERGED_CLEAN_PCA.bim" >>  1KG_MERGED_CLEAN_PCA.bed.smartpca.par
        echo "indivname:        1KG_MERGED_CLEAN_PCA.fam" >>  1KG_MERGED_CLEAN_PCA.bed.smartpca.par
        echo "evecoutname:      "$output_prefix"_1KG_MERGED_CLEAN_PCA.evec" >>  1KG_MERGED_CLEAN_PCA.bed.smartpca.par
#       echo "evaloutname:      "$filename"_1KG_MERGED_CLEAN_PCA.eval" >>  "$filename"_1KG_MERGED_CLEAN_PCA.bed.smartpca.par
#       echo "altnormstyle:    NO" >>  "$filename"_1KG_MERGED_CLEAN_PCA.bed.smartpca.par
        echo "numoutevec:      10" >>  1KG_MERGED_CLEAN_PCA.bed.smartpca.par
        echo "numoutlieriter:  0"  >>  1KG_MERGED_CLEAN_PCA.bed.smartpca.par
        echo "fastmode: YES" >> 1KG_MERGED_CLEAN_PCA.bed.smartpca.par
        ##echo "poplistname:     poplist" >> "$filename"_1KG_MERGED_CLEAN_PCA.bed.smartpca.par


        smartpca -p  1KG_MERGED_CLEAN_PCA.bed.smartpca.par >  output.smartpca.log
        echo "FID IID PC1 PC2 POP" > 1KG_MERGED_CLEAN_PCA_2PCs.plot.input.txt
        join -j1 <(sort -k1,1 1KG_MERGED_CLEAN_PCA.pop) <(grep -v eigvals:  "$output_prefix"_1KG_MERGED_CLEAN_PCA.evec | tr ":" "\t") | awk '{print $1,$2,$5,$6,$3}' | sort -k1,1|uniq >>  "$output_prefix"_1KG_MERGED_CLEAN_PCA_2PCs.plot.input.txt

        #R CMD BATCH -"$filename"_1KG_MERGED_CLEAN_PCA_2PCs.plot.input.txt -"$filename"_1KG_MERGED_CLEAN_PCA.png -$filename /gpfs/group1/m/mdr23/software/qc_script/plot_PCA_1KG.R

        Rscript plot_PCA_1KG.R "$output_prefix"_1KG_MERGED_CLEAN_PCA_2PCs.plot.input.txt User_Data "$output_prefix"_1KG_MERGED_CLEAN_PCA.png
#       rm -rf ${filepath}/1KG_data

        #screeplot input
        line_count=$(cat 1KG_MERGED_CLEAN_PCA.evec | wc -l)
	cat 1KG_MERGED_CLEAN_PCA.evec | head -n1 | sed -r 's/^\s+//g' | sed -r 's/\s+/ /g' | tr ' ' '\n' | sed '/^$/d' |sed '1d' | awk 'NR>1{print $1,$1/(var1-2),"PC"NR}' var1=${line_count} | sed '1i eigenval fraction_variance PC' > "$output_prefix"_1KG_MERGED_CLEAN_PCA.eval
        ##generate a scree plot
        Rscript /gpfs/group1/m/mdr23/software/qc_script/screeplot.R "$output_prefix"_1KG_MERGED_CLEAN_PCA.eval

    
    evec_out=$(dx upload "$output_prefix"_1KG_MERGED_CLEAN_PCA.evec --brief)
    eval_out=$(dx upload "$output_prefix"_1KG_MERGED_CLEAN_PCA.eval --brief)
    pca_plot=$(dx upload "$output_prefix"_1KG_MERGED_CLEAN_PCA.png --brief)
    screeplot=$(dx upload "$output_prefix"_1KG_MERGED_CLEAN_PCA.eval.png --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output evec_out "$evec_out" --class=file
    dx-jobutil-add-output eval_out "$eval_out" --class=file
    dx-jobutil-add-output pca_plot "$pca_plot" --class=file
    dx-jobutil-add-output screeplot "$screeplot" --class=file
}
