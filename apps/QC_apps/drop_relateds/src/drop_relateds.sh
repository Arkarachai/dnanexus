#!/bin/bash
# drop_relateds 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of bed_file: '$bed_file'"
    echo "Value of bim_file: '$bim_file'"
    echo "Value of fam_file: '$fam_file'"
    echo "Value of ibd_file: '$ibd_file'"
    echo "Value of order_file: '$order_file'"
    echo "Value of pi_hat_threshold: '$pi_hat_threshold'"
    echo "Value of out_prefix: '$out_prefix'"
    
	SCRIPT_ARGS=""
	if test "$exact" == "true"; then
		SCRIPT_ARGS="--exact"
	fi

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$bed_file" -o bed_file

    dx download "$bim_file" -o bim_file

    dx download "$fam_file" -o fam_file

    dx download "$ibd_file" -o ibd_file
    
    if [ -n "$order_file" ]
    then
        dx download "$order_file" -o order_file
		SCRIPT_ARGS="$SCRIPT_ARGS --order order_file --drop-before"
    fi
    if [ -n "$fam_file" ]
    then
        output_prefix="$out_prefix"
    else
        output_prefix=outfile
    fi
	
LD_LIBRARY_PATH=/usr/local/lib/
	#drop_relateds.R --bed bed_file --bim bim_file --fam fam_file --thresh $threshold --rsq $rsq_threshold --out drop_list $SCRIPT_ARGS

	#Get the list of pairs from the IBD file at pi_hat threshold
	awk '{if($10>=var1) print $2,$4}' var1="$pi_hat_threshold" ibd_file > related_pair.txt

        drop_related.R --pairs related_pair.txt  --out related_drop_list.txt $SCRIPT_ARGS

        join -1 2 -2 1 <(sort -k2,2 fam_file) <(sort -k1,1 related_drop_list.txt)  | awk '{print $2,$1}' > related_sample_fid_iid.txt

        plink2 --bed bed_file --bim bim_file --fam fam_file --remove related_sample_fid_iid.txt --make-bed --out "$output_prefix"_related_dropped
	
    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    drop_list=$(dx upload related_sample_fid_iid.txt --brief)
    bed_out=$(dx upload "$output_prefix"_related_dropped.bed --brief)
    bim_out=$(dx upload "$output_prefix"_related_dropped.bim --brief)
    fam_out=$(dx upload "$output_prefix"_related_dropped.fam --brief)
    dx-jobutil-add-output bed_out "$bed_out" --class=file
    dx-jobutil-add-output bim_out "$bim_out" --class=file
    dx-jobutil-add-output fam_out "$fam_out" --class=file
    dx-jobutil-add-output drop_list "$drop_list" --class=file
    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

}
