#!/bin/bash
# shapeit2 0.0.1
# Generated by dx-app-wizard.
#
# Parallelized execution pattern: Your app will generate multiple jobs
# to perform some computation in parallel, followed by a final
# "postprocess" stage that will perform any additional computations as
# necessary.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() or any other entry point is ALWAYS
# executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.
#set -x
main() {

    echo "Value of plink_set: '$plink_set'"
    #echo "Value of bim_file: '$bim_file'"
    #echo "Value of fam_file: '$fam_file'"
    echo "Value of chromosome: '$chromosome'"
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

	wkdir=$(mktemp -d)
	cd $wkdir
	
	dx download "$plink_set" -o plink_set.tgz
	N_PLINK_F=$(tar -tzf plink_set.tgz | wc -l)
	BED_FN=$(tar -tzf plink_set.tgz | grep '.bed$')
	BIM_FN=$(tar -tzf plink_set.tgz | grep '.bim$')
	FAM_FN=$(tar -tzf plink_set.tgz | grep '.fam$')
	
	if test "$N_PLINK_F" -ne 3; then
		dx-jobutil-report-error "ERROR: There must be exactly 3 files in a plink_set.tgz file"
	elif test -z "$BED_FN" -o -z "$BIM_FN" -o -z "$FAM_FN"; then
		dx-jobutil-report-error "ERROR: Could not find at least one of *.bed, *.bim, *.fam in the plink_set.tgz"
	fi
		
    prefix=$(dx describe --name "$plink_set" | sed 's/\.plink-set.ta*r*\.*gz$//')
    tar -xvf plink_set.tgz
	
	chr_file=$(mktemp)
        
	if test "$chromosome" == "Autosomes"
	then
    	sed 's/ /\t/g' "$BIM_FN" | cut -f1 | sort -u | awk '$1>=1 && $1<=22' > $chr_file
   	else
    	echo $chromosome > $chr_file
    fi

    for i in $(cat $chr_file)
    do
    	process_jobs[$i]=$(dx-jobutil-new-job phasing -ichr:string=$i -iprefix:string="$prefix" -iref_folder="$ref" -iplink_set:file="$plink_set")

		dx-jobutil-add-output haps --array "${process_jobs[$i]}:hap" --class=jobref 
    	dx-jobutil-add-output sample --array "${process_jobs[$i]}:sample" --class=jobref 
		dx-jobutil-add-output chroms --array "$i" --class=string
    done

}

phasing() {

	wkdir=$(mktemp -d)
	cd $wkdir

    # Fill in your process code here
    dx download "$plink_set" -o plink_set.tgz
    
    BED_FN=$(tar -tzf plink_set.tgz | grep '.bed$')
	BIM_FN=$(tar -tzf plink_set.tgz | grep '.bim$')
	FAM_FN=$(tar -tzf plink_set.tgz | grep '.fam$')
			
    prefix=$(dx describe --name "$plink_set" | sed 's/\.plink-set.ta*r*\.*gz$//')
    tar -xvf plink_set.tgz
       
	dx download $(dx find data --name "chr${chr}_map.txt" --project $DX_RESOURCES_ID --folder /$ref_folder --brief) -o genetic_map

	# set 5% missingness maximum so we don't get complaints from shapeit
	plink --allow-no-sex --noweb --geno 0.05 --bed "$BED_FN" --bim "$BIM_FN" --fam "$FAM_FN" --chr ${chr} --make-bed --out ${prefix}_chr${chr}
	
	shapeit.v2.r644.linux.x84_64 -B ${prefix}_chr${chr}.bed ${prefix}_chr${chr}.bim ${prefix}_chr${chr}.fam -M genetic_map -O ${prefix}_chr${chr}.phased -T $(nproc) || true
	
	hap=$(dx upload ${prefix}_chr${chr}.phased.haps --brief)
    sample=$(dx upload ${prefix}_chr${chr}.phased.sample --brief)	

	dx-jobutil-add-output hap "$hap" --class=file
    dx-jobutil-add-output sample "$sample" --class=file
    cd -
    rm -rf $wkdir

}
