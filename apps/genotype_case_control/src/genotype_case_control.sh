#!/bin/bash
# genotype_case_control 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of input_plink_binary: '${input_plink_binary[@]}'"
    echo "Value of input_phenotype: '$input_phenotype'"
    echo "Value of input_covariate: '${input_covariate[@]}'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
	mkdir plink_files
	mkdir covariate_files
	mkdir pheno_files
	dx download "$input_phenotype" -o pheno_files/input_phenotype
    
    for i in ${!input_plink_binary[@]}
    do
    	dx download "${input_plink_binary[$i]}" -o plink_files/input_plink_binary-$i
    done

    for i in ${!input_covariate[@]}
    do
    	dx download "${input_covariate[$i]}" -o covariate_files/input_covariate-$i
    done
	num_cov_files=$(ll covariate_files/* | wc -l)
	if[$num_cov_files > 1 ]
    then
    	join -j2 <(sort -k2,2 )
    for i in {3..942}; 
    do 
    	pheno=$(cut -f${i} geisinger_freeze_40_icd9_5d_64c_3c.txt | head -n1); 
    	cut -f1,2,${i} geisinger_freeze_40_icd9_5d_64c_3c.txt > pheno5d_files/${pheno}_pheno.txt;
    done
    for i in {998..998}; 
    do 
    	pheno=$(echo "998_pheno.txt.hwe" | cut -d"_" -f1); 
    	cat 998_pheno.txt.hwe | grep -v ALL  | awk 'NR>1{print $2,$6}' | awk '{if(a[$1])a[$1]=a[$1]" "$2; \
		else a[$1]=$2;}END{for (i in a)print i, a[i];}' ; 
	done
    join -j2 <(sort -k2,2 rs1650017.raw) \
    <(cut -f1,2,427 geisinger_freeze_40_icd9_3d_64c_3c.txt | \
    sort -k2,2) | awk '{if ($7!="NA" && $9!="NA") print $7,$9}' \
    | grep "1$" | cut -f1 | sort | uniq -c
    	

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

	

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    output_file=$(dx upload output_file --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output output_file "$output_file" --class=file
}
