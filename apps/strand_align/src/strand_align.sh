#!/bin/bash
# strand_align 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -x

main() {
    	# The following line(s) use the dx command-line tool to download your file
    	# inputs to the local file system using variable names for the filenames. To
    	# recover the original filenames, you can use the output of "dx describe
    	# "$variable" --name".
	
	echo "Value of bed_file: '$bed_file'"
   	echo "Value of bim_file: '$bim_file'"
   	echo "Value of fam_file: '$fam_file'"
	echo "Value of chromosome: '$chromosome'"
	echo "Value of strand_file: '$strand_file'"

	dx download "$bim_file" -o data.bim
	prefix=$(dx describe --name "$bim_file" | sed 's/\.bim$//')
	echo "PREFIX: $prefix"
	
	BIM_FN="data.bim"

	# If I was given the strand file, go ahead and process it
	if test "$strand_file"; then
		WORKING_DIR=$(mktemp -d)
		mv data.bim $WORKING_DIR
		cd $WORKING_DIR

		dx download "$bed_file" -o data.bed
		dx download "$fam_file" -o data.fam
		dx download "$strand_file" -o data.strand

		# create the chr_file, pos_file and flip_file
		CHR_FILE=$(mktemp)
		POS_FILE=$(mktemp)
		FLIP_FILE=$(mktemp)

		cut -f 1,2 data.strand > $CHR_FILE
		cut -f 1,3 data.strand > $POS_FILE
		awk '{if ($5=="-") print $0}' data.strand | cut -f 1 > $FLIP_FILE

		#1. Apply the chr
		plink --noweb --allow-no-sex --bfile data --update-map $CHR_FILE --update-chr --make-bed --out data_chr
		#2. Apply the pos
		plink --noweb --allow-no-sex --bfile data_chr --update-map $POS_FILE --make-bed --out data_pos
		#3. Apply the flip
		plink --noweb --allow-no-sex --bfile data_pos --flip $FLIP_FILE --make-bed --out data_flip
		#4. Extract the SNPs in the pos file, we don't want SNPs that aren't in the strand file
		plink --noweb --allow-no-sex --bfile data_flip --extract $POS_FILE --make-bed --out ${prefix}_final
		# Note: we should throw a warning here if we extract ANYTHING!

		# Now, reupload the data_final.(bed/bim/fam) and set the variables appropriately
		bed_file=$(dx upload ${prefix}_final.bed --brief)
		bim_file=$(dx upload ${prefix}_final.bim --brief)
		fam_file=$(dx upload ${prefix}_final.fam --brief)
		
		cd -
		mv $WORKING_DIR/${prefix}_final.bim data.bim
		
		rm -rf $WORKING_DIR
		rm $CHR_FILE
		rm $POS_FILE
		rm $FLIP_FILE
	fi
		


	#for bim in *.bim
	#do
	#	prefix="${bim%.bim}"
	#done	
	
	postprocess_arg=""
	
	chr_file=$(mktemp)

	if test "$chromosome" == "Autosomes"
	then
		sed 's/ /\t/g' data.bim | cut -f1 | sort -u | awk '$1>=1 && $1<=22' > $chr_file
	else
		echo $chromosome > $chr_file
	fi
		
		
	for i in $(cat $chr_file)
	do
		process_jobs[$i]=$(dx-jobutil-new-job strand_check -ichr:string=$i -iprefix:string="$prefix" -iref_folder="$ref" -ibed_file:file="$bed_file" -ibim_file:file="$bim_file" -ifam_file:file="$fam_file" -iexcl_pal:boolean="$remove_palindromic")
  	
		postprocess_arg="$postprocess_arg -ibed_files=${process_jobs[$i]}:bed_out -ibim_files=${process_jobs[$i]}:bim_out -ifam_files=${process_jobs[$i]}:fam_out"	
	done

	postprocess=$(dx-jobutil-new-job postprocess $postprocess_arg -iprefix:string="$prefix" --depends-on ${process_jobs[@]})	
	
	dx-jobutil-add-output plink_out "$postprocess:plink_out" --class=jobref

}

strand_check(){
	
	wkdir=$(mktemp -d)
	cd $wkdir
	
	# Download all inputs

	dx download "$bed_file" -o bed_file
    dx download "$bim_file" -o bim_file
    dx download "$fam_file" -o fam_file
    
    prefix=$(dx describe --name "$bim_file" | sed 's/\.bim$//')
	
	# Download 1000 Genomes data
	dx download $(dx find data --name "genotypes.sample" --project $DX_RESOURCES_ID --folder /$ref_folder --brief) -o sample_file
	dx download $(dx find data --name "chr${chr}.haplotypes" --project $DX_RESOURCES_ID --folder /$ref_folder --brief) -o haplotype_file
	dx download $(dx find data --name "chr${chr}.legend" --project $DX_RESOURCES_ID --folder /$ref_folder --brief) -o legend_file
	
	PLINK_ARGS=""
	if test "$excl_pal" == "true"; then
	
		cat bim_file | awk '{if($5=="A" && $6=="T" || $5=="T" && $6=="A" || $5=="G" && $6=="C" || $5=="C" && $6=="G")print $2}' > palindromic_SNPs.txt
	
		## Split PLINK files
		PLINK_ARGS="--exclude palindromic_SNPs.txt"		
	fi
	
	
	plink --allow-no-sex --bed bed_file --bim bim_file --fam fam_file --chr ${chr} $PLINK_ARGS --make-bed --out ${prefix}_chr${chr} --noweb
	
	## Run ShapeIt to check strands
	shapeit.v2.r644.linux.x84_64 -check -B ${prefix}_chr${chr} --input-ref haplotype_file legend_file sample_file --output-log chr${chr}.alignments -T $(nproc) || true
	
	if test -f chr${chr}.alignments.snp.strand -a $(grep "^strand" chr${chr}.alignments.snp.strand | wc -l) -gt 0; then
		## Store all Strand Alignment problems in a seperate file
		
		echo "Log File:"
		cat chr${chr}.alignments.log
		
		echo "Strand problems"
		grep '^strand' chr${chr}.alignments.snp.strand || true

		# add monomorphic alleles and flip simple strands
		fix_monomorphic.py chr${chr}.alignments.snp.strand > allele_recode
		
		echo "Allele fixer:"
		cat allele_recode
		
		## Use PLINK to flip strands for list of snps 
		plink --allow-no-sex --bfile ${prefix}_chr${chr} --update-alleles allele_recode --make-bed --out ${prefix}_chr${chr}_flipped
		
		# recheck the strands using shapeit and report any errors!
		shapeit.v2.r644.linux.x84_64 -check -B ${prefix}_chr${chr}_flipped --input-ref haplotype_file legend_file sample_file --output-log chr${chr}.alignments_recheck -T $(nproc) || true
		
		if test -f chr${chr}.alignments_recheck.snp.strand -a $(grep "^strand" chr${chr}.alignments_recheck.snp.strand | wc -l) -gt 0; then
			echo "WARNING: SNPs that still have strand issues:"
			grep "^strand" chr${chr}.alignments_recheck.snp.strand
		fi
		
	else
		mv ${prefix}_chr${chr}.bed ${prefix}_chr${chr}_flipped.bed
		mv ${prefix}_chr${chr}.bim ${prefix}_chr${chr}_flipped.bim
		mv ${prefix}_chr${chr}.fam ${prefix}_chr${chr}_flipped.fam
	fi
    	
	# The following line(s) use the dx command-line tool to upload your file
   	# outputs after you have created them on the local file system.  It assumes
   	# that you have used the output field name for the filename for each output,
   	# but you can change that behavior to suit your needs.  Run "dx upload -h"
   	# to see more options to set metadata.

   	bed_out=$(dx upload ${prefix}_chr${chr}_flipped.bed --brief)
   	bim_out=$(dx upload ${prefix}_chr${chr}_flipped.bim --brief)
   	fam_out=$(dx upload ${prefix}_chr${chr}_flipped.fam --brief)
   	
   	# The following line(s) use the utility dx-jobutil-add-output to format and
   	# add output variables to your job's output as appropriate for the output
   	# class.  Run "dx-jobutil-add-output -h" for more information on what it
   	# does.
   	dx-jobutil-add-output bed_out "$bed_out" --class=file
   	dx-jobutil-add-output bim_out "$bim_out" --class=file
   	dx-jobutil-add-output fam_out "$fam_out" --class=file
   	
   	cd -
   	rm -rf $wkdir
}

postprocess(){
	echo "THIS IS PREFIX"$prefix
	BED_FN=$(mktemp)
    BIM_FN=$(mktemp)
    FAM_FN=$(mktemp)

    JOINT_FN=$(mktemp)

  	for i in "${!bed_files[@]}"
   	do
       	dx download "${bed_files[$i]}" -o bed_files-$i
        echo "bed_files-$i" >> $BED_FN
   	done

   	for i in "${!bim_files[@]}"
   	do
      	dx download "${bim_files[$i]}" -o bim_files-$i
        echo "bim_files-$i" >> $BIM_FN
   	done

   	for i in "${!fam_files[@]}"
   	do
       	dx download "${fam_files[$i]}" -o fam_files-$i
        echo "fam_files-$i" >> $FAM_FN
   	done

    paste $BED_FN $BIM_FN $FAM_FN > $JOINT_FN

    plink --noweb --allow-no-sex --merge-list $JOINT_FN --out ${prefix}_flipped --make-bed  
    
    tar -cvzf ${prefix}_flipped.plink-set.tgz ${prefix}_flipped.bed ${prefix}_flipped.bim ${prefix}_flipped.fam
    ps_out=$(dx upload ${prefix}_flipped.plink-set.tgz --brief)

  	dx-jobutil-add-output plink_out "$ps_out" --class=file
	
}

