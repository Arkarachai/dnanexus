#!/bin/bash
# association_result_annotation 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.
set -x
main() {
	ls -l /usr/local/lib

    echo "Value of input_file: '$input_file'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$input_file" -o input_file

	# Create SQLite database

	sqlite3 anno.db

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.
	
	#Get the column names from input file
	
	icd_tbl_col=$(head -n1 input_file | sed 's/)//g' | sed 's/(//g' | sed 's/\t/ varchar(255),/g' | sed 's/$/ varchar(255)/g')

	# Create a table for input results file
	sqlite3 anno.db "create table assoc_result ($icd_tbl_col)"

	# Insert input results to the table.
	
	sqlite3 anno.db <<!
.separator \t
.import input_file assoc_result
delete from assoc_result where outcome='Outcome';
!

	# Import ICD-9 code description table to the database
	dx download "$DX_RESOURCES_ID:icd9_codes_description_l.txt"  -o icd9_code_desc.txt
	sqlite3 anno.db <<!
create table icd9_code_desc (icd9_code varchar(8), desc text);
.header on
.separator "\t"
.import icd9_code_desc.txt icd9_code_desc
delete from icd9_code_desc where desc='desc';
select * from icd9_code_desc limit 5;
.tables
!
	

	# Create position file of SNPs from the association result file
    cut -f3 input_file | sed 's/:/ /g' | sort -u  > input_file_snp_position.txt

	# Run biofilter to get gene, upstream gene, downstream gene and GWAS
	sudo mkdir /usr/share/biofilter
	sudo chmod a+rwx /usr/share/biofilter
		
	#dx download -r "$DX_RESOURCES_ID:/biofilter/*" -o /usr/share/biofilter
	#dx download "$DX_RESOURCES_ID:/LOKI/loki-20150427-nosnps.db" -o /usr/share/biofilter/loki.db
    
    #python /usr/share/biofilter/biofilter.py biofilter-2 -v -k /.db -P input_file_snp_position.txt -a snp gene upstream downstream

	# Import biofilter result into
	#gene_gwas_col=$(head -n1 biofilter.position.gene-upstream-downstream |sed 's/^#//g' | sed 's/\//_/g' | sed 's/%/_/g' | sed 's/\t/ varchar(255),/g' | sed 's/$/ varchar(255)/g' )
	#sqlite3 anno.db "create table biofilter_anno ($gene_gwas_col)
	#echo -e '.separator "\t"\n.import biofilter.position.gene-upstream-downstream biofilter_anno' | sqlite3 anno.db

	if [ "$icd9_desc" == true ];
	then
		icd9_join="left join icd9_code_desc b on a.outcome=b.icd9_code"
		icd9_select=",b.desc as icd9_description"

	fi

	if [ "$or_val" == true ];
	then
		or_val_query=",exp(var1_beta) as odds_ratio"
	fi
: '
	if $gene;
	then
		#	gene_query="left join biofilter_geno on Var1_Pos=replace(position,'chr','')"
		#gene_col="gene as Gene"
	fi


	if $up_gene;
	then
		if [ ${gene_query} != "" ]
		then
			up_gene_col="upstream as `Upstream Gene`, up_distance as `Upstream Distance`"
		else
			gene_guery="left join biofilter_geno on Var1_Pos=replace(position,'chr','')"
			up_gene_col="upstream as `Upstream Gene`, up_distance as `Upstream Distance`"
	fi
	
	if $down_gene
	then
		if [ ${gene_query} != "" ]
		then
			down_gene_col="upstream as `Downstream Gene`, up_distance as `Downstream Distance`"
		else
			gene_guery="left join biofilter_geno on Var1_Pos=replace(position,'chr','')"
			down_gene_col="upstream as `Downstream Gene`, up_distance as `Downstream Distance`"
	fi

	if $case_control_num;
	then
		case_control_query="Num_Cases as Cases, NumNon_Missing-Num_Cases as Controls"
	fi

	if $gwas;
	then
			gwas_query="trait as GWAS Trait"
	fi
'
echo select *${icd9_select}${or_val_query} from assoc_result a ${icd9_join} ${gene_query};

sqlite3 anno.db <<!
.load /usr/local/lib/libsqlitefunctions.so 
.headers on
.mode tabs
.output outfile 
select a.* $icd9_select $or_val_query from assoc_result a ${icd9_join} ${gene_query};
!
    
	
# The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.
ls -l
    out_file=$(dx upload outfile --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output out_file "$out_file" --class=file
    ls -l
}
