#!/bin/bash
# impute2_to_plink 0.0.1
# Generated by dx-app-wizard.
#
# Parallelized execution pattern: Your app will generate multiple jobs
# to perform some computation in parallel, followed by a final
# "postprocess" stage that will perform any additional computations as
# necessary.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() or any other entry point is ALWAYS
# executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -x

main() {

    echo "Value of sample_files: '${sample_files[@]}'"
    echo "Value of info_files: '${info_files[@]}'"
    echo "Value of geno_files: '${geno_files[@]}'"
    echo "Value of chroms: '${chroms[@]}'"
    echo "Value of prob_thresh: '$prob_thresh'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

	N_SAMPLE="${#sample_files[@]}"
	N_INFO="${#info_files[@]}"
	N_GENO="${#geno_files[@]}"
	N_CHROM="${#chroms[@]}"

	if test $N_SAMPLE -ne $N_INFO -o $N_INFO -ne $N_GENO -o $N_GENO -ne $N_CHROM; then
		dx-jobutil-report-error "ERROR: All array inputs must be the same size"
	fi


    #for i in "${!sample_files[@]}"
    #do
    #    dx download "${sample_files[$i]}" -o sample_files-$i
    #done

    #for i in "${!info_files[@]}"
    #do
    #    dx download "${info_files[$i]}" -o info_files-$i
    #done

    #for i in "${!geno_files[@]}"
    #do
    #    dx download "${geno_files[$i]}" -o geno_files-$i
    #done

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.
    #
    # Split your work into parallel tasks.  As an example, the
    # following generates 10 subjobs running with the same dummy
    # input.  The utility dx-jobutil-new-job uses the same syntax as
    # dx run for specifying input, and you can explicitly specify the
    # class to enable proper parsing.

    for i in "${!sample_files[@]}"
    do
        process_jobs[$i]=$(dx-jobutil-new-job process -isample:file="${sample_files[$i]}" -iinfo:file="${info_files[$i]}" -igeno:file="${geno_files[$i]}" -ichr:string="${chroms[$i]}" -ithresh:float="$prob_thresh")
    	dx-jobutil-add-output --array bed_files "${process_jobs[$i]}:bed_file" --class=jobref
	    dx-jobutil-add-output --array bim_files "${process_jobs[$i]}:bim_file" --class=jobref
    	dx-jobutil-add-output --array fam_files "${process_jobs[$i]}:fam_file" --class=jobref
    done

    # postprocess job as the output of your app, you should return it
    # here using a reference.  If the output field in the postprocess
    # function is called "answer", you can set that in the output hash
    # as follows.
    #
    #   dx-jobutil-add-output app_output_field "$postprocess":answer --class=jobref
    #
    # Tip: you can include in your output at this point any open
    # objects (such as gtables) which are closed by another entry
    # point that finishes later.  The system will check to make sure
    # that the output object is closed and will attempt to clone it
    # out as output into the parent container only after all subjobs
    # have finished.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

}

process() {
    # Fill in your process code here
	
	dx download "$sample" -o sample
	dx download "$info" -o info.gz
	dx download "$geno" -o geno.gz

	PREFIX=$(dx describe --name "$geno" | sed 's/\..*//')
	PREFIX="$(pwd -P)/$PREFIX"

	impute2-to-plink.py -s sample -i info.gz -g geno.gz -c $chr -m $thresh -b -p $PREFIX -d $(mktemp -d)
	bed_file=$(dx upload "$PREFIX.bed" --brief)
    dx-jobutil-add-output bed_file "$bed_file" --class=file
	bim_file=$(dx upload "$PREFIX.bim" --brief)
    dx-jobutil-add-output bim_file "$bim_file" --class=file
	fam_file=$(dx upload "$PREFIX.fam" --brief)
    dx-jobutil-add-output fam_file "$fam_file" --class=file
}

