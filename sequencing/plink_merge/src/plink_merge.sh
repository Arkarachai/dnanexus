#!/bin/bash
# vcf_pca 0.0.1
# Generated by dx-app-wizard.
#
# Parallelized execution pattern: Your app will generate multiple jobs
# to perform some computation in parallel, followed by a final
# "postprocess" stage that will perform any additional computations as
# necessary.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() or any other entry point is ALWAYS
# executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -x

main() {

    echo "Value of bed_fn: '${bed_fn[@]}'"
    echo "Value of bim_fn: '${bim_fn[@]}'"
    echo "Value of fam_fn: '${fam_fn[@]}'"

    echo "Value of merge_args: '$merge_args'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

	# Sanity checks:

	# We're using bed/bim/fam here!

	# - make sure vcf + vcfidx have same # of elements
	if test "${#bed_fn[@]}" -ne "${#bim_fn[@]}" -o "${#bed_fn[@]}" -ne "${#fam_fn[@]}"; then
		dx-jobutil-report-error "ERROR: Number of BED/BIM/FAM files do NOT match!"
	fi

	# first, we need to match up the VCF and tabix index files
	# To do that, we'll get files of filename -> dxfile ID
	BED_LIST=$(mktemp)
	for i in "${!bed_fn[@]}"; do	
		dx describe --json "${bed_fn[$i]}" | jq -r ".name,.id" | tr '\n' '\t' | sed -e 's/\t$/\n/' -e 's/\.bed\t/\t/' >> $BED_LIST
	done
	
	BIM_LIST=$(mktemp)
	for i in "${!bim_fn[@]}"; do	
		dx describe --json "${bim_fn[$i]}" | jq -r ".name,.id" | tr '\n' '\t' | sed -e 's/\t$/\n/' -e 's/\.bim\t/\t/' >> $BIM_LIST
	done

	FAM_LIST=$(mktemp)
	for i in "${!fam_fn[@]}"; do	
		dx describe --json "${fam_fn[$i]}" | jq -r ".name,.id" | tr '\n' '\t' | sed -e 's/\t$/\n/' -e 's/\.fam\t/\t/' >> $FAM_LIST
	done


	# Now, get the prefix (strip off any .tbi) and join them
	JOINT_LIST=$(mktemp)
	join -t$'\t' -j1 <(sort -k1,1 $BED_LIST) <(join -t$'\t' -j1 <(sort -k1,1 $BIM_LIST) <(sort -k1,1 $FAM_LIST) ) > $JOINT_LIST
	
	# Ensure that we still have the same number of files; throw an error if not
	if test $(cat $JOINT_LIST | wc -l) -ne "${#bed_fn[@]}"; then
		dx-jobutil-report-error "ERROR: BED/BIM/FAM files do not match!"
	fi
	
	WKDIR=$(mktemp -d)
	OUTDIR=$(mktemp -d)
	cd $WKDIR
	
	
    FAM_OVERALL=$(mktemp)
    N_F=0
    MAX_N=0
   	FIRST_PREF=""
   	MERGE_FILE=$(mktemp)
   	i=0;

	while read PLINK_LINE; do
		BED_DXFN=$(echo "$PLINK_LINE" | cut -f2)
		BIM_DXFN=$(echo "$PLINK_LINE" | cut -f3)
		FAM_DXFN=$(echo "$PLINK_LINE" | cut -f4)

		dx download "$BED_DXFN" -o f_$i.bed
		dx download "$BIM_DXFN" -o f_$i.bim
		dx download "$FAM_DXFN" -o f_$i.fam

		if test -s f_$i.bed; then
			if test $N_F -eq 0; then
				FIRST_PREF="f_$i"
				MAX_N=$(cat f_$i.fam | wc -l)
				sed 's/[ \t][ \t]*/\t/g' f_$i.fam | cut -f1-2 | sort -t'\0' > $FAM_OVERALL
			else
				echo "f_$i" >> $MERGE_FILE
				TEST_N=$(cat f_$i.fam | wc -l)
				MAX_N=$((TEST_N > MAX_N ? TEST_N : MAX_N))
				TMPFAM=$(mktemp)
				join -t'\0' $FAM_OVERALL <(sed 's/[ \t][ \t]*/\t/g' f_$i.fam | cut -f1-2 | sort -t'\0') > $TMPFAM
				mv $TMPFAM $FAM_OVERALL			
			fi
		
			N_F=$((N_F + 1))
		fi
		
		i=$((i+1))
	done < $JOINT_LIST
	
	# Make sure the number of samples is identical for each
	if test "$(cat $FAM_OVERALL | wc -l)" -lt $MAX_N; then
		dx-jobutil-report-error "ERROR: Samples from FAM files do not overlap!"
	fi
	
	eval plink2 --bfile "$FIRST_PREF" --merge-list $MERGE_FILE "$merge_args" --out $OUTDIR/$prefix --make-bed -allow-no-sex

	# get a list of those dropped
	SAMPLE_DROPPED=$(mktemp)
	join -v1 -t'\0' $FAM_OVERALL <(sed 's/[ \t][ \t]*/\t/g' $OUTDIR/$prefix.fam | cut -f1-2 | sort -t'\0') > $OUTDIR/$prefix.excluded
	
	for ext in bed bim fam; do
		dxfn=$(dx upload --brief $OUTDIR/$prefix.$ext)
		dx-jobutil-add-output ${ext}_out "$dxfn" --class=file
	done
	
	if test -s $OUTDIR/$prefix.excluded; then
		dxfn=$(dx upload --brief $OUTDIR/$prefix.excluded)
		dx-jobutil-add-output samp_excl "$dxfn" --class=file
	fi

}
