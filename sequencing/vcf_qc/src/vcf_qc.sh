#!/bin/bash
# vcf_qc 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of vcf_fn: '$vcf_fn'"
    echo "Value of vcfidx_fn: '$vcfidx_fn'"
    echo "Value of SNP_tranches: '$SNP_tranches'"
    echo "Value of SNP_recal: '$SNP_recal'"
    echo "Value of INDEL_tranches: '$INDEL_tranches'"
    echo "Value of INDEL_recal: '$INDEL_recal'"
    echo "Value of SNP_ts: '$SNP_ts'"
    echo "Value of INDEL_ts: '$INDEL_ts'"
    echo "Value of addl_filter: '$addl_filter'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$vcf_fn" -o raw.vcf.gz
    dx download "$vcfidx_fn" -o raw.vcf.gz.tbi
    
    RUN_SNP_RECAL=0
    if [ -n "$SNP_tranches" ]; then
        dx download "$SNP_tranches" -o SNP_tranches
        if [ -n "$SNP_recal" ]; then
	        dx download "$SNP_recal" -o SNP_recal
	        RUN_SNP_RECAL=1	        
	    fi
    fi
    
    RUN_INDEL_RECAL=0
    if [ -n "$INDEL_tranches" ]; then
        dx download "$INDEL_tranches" -o INDEL_tranches
        if [ -n "$INDEL_recal" ]; then
	        dx download "$INDEL_recal" -o INDEL_recal
	        RUN_INDEL_RECAL=1
	    fi
    fi
    
    RUN_FILTERS=0
    if test -n "$addl_filter"; then
    	RUN_FILTERS=1
    fi

	# get the resources we need in /usr/share/GATK
	sudo mkdir -p /usr/share/GATK/resources
	sudo chmod -R a+rwX /usr/share/GATK
	
	dx download $(dx find data --name "GenomeAnalysisTK-3.2-2.jar" --project $DX_RESOURCES_ID --brief) -o /usr/share/GATK/GenomeAnalysisTK-3.2-2.jar
	dx download $(dx find data --name "dbsnp_137.b37.vcf.gz" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/dbsnp_137.b37.vcf.gz
	dx download $(dx find data --name "dbsnp_137.b37.vcf.gz.tbi" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/dbsnp_137.b37.vcf.gz.tbi
	dx download $(dx find data --name "human_g1k_v37_decoy.fasta" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta
	dx download $(dx find data --name "human_g1k_v37_decoy.fasta.fai" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta.fai
	dx download $(dx find data --name "human_g1k_v37_decoy.dict" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/human_g1k_v37_decoy.dict

    TOT_MEM=$(free -m | grep "Mem" | awk '{print $2}')
    # only ask for 90% of total system memory
    TOT_MEM=$((TOT_MEM * 9 / 10))

	BASE_VCF=raw.vcf.gz

	if test $RUN_SNP_RECAL -ne 0; then
		SNP_RECAL_DIR=$(mktemp -d)
		java -d64 -Xms512m -Xmx${TOT_MEM}m -jar /usr/share/GATK/GenomeAnalysisTK-3.2-2.jar \
		-T ApplyRecalibration \
		-nt $(nproc --all) \
		-R /usr/share/GATK/resources/human_g1k_v37_decoy.fasta \
		-input $BASE_VCF \
		-tranchesFile SNP_tranches \
		-recalFile SNP_recal \
		-mode SNP --ts_filter_level $SNP_ts \
		-o $SNP_RECAL_DIR/filtered.vcf.gz
		
		rm $BASE_VCF
		rm $BASE_VCF.tbi
		BASE_VCF=$SNP_RECAL_DIR/filtered.vcf.gz
	fi
	
	if test $RUN_SNP_RECAL -ne 0; then
		INDEL_RECAL_DIR=$(mktemp -d)
		java -d64 -Xms512m -Xmx${TOT_MEM}m -jar /usr/share/GATK/GenomeAnalysisTK-3.2-2.jar \
		-T ApplyRecalibration \
		-nt $(nproc --all) \
		-R /usr/share/GATK/resources/human_g1k_v37_decoy.fasta \
		-input $BASE_VCF \
		-tranchesFile INDEL_tranches \
		-recalFile INDEL_recal \
		-mode INDEL --ts_filter_level $INDEL_ts \
		-o $INDEL_RECAL_DIR/filtered.vcf.gz
		
		rm $BASE_VCF
		rm $BASE_VCF.tbi
		BASE_VCF=$INDEL_RECAL_DIR/filtered.vcf.gz
	fi
	
	if test $RUN_FILTERS -ne 0; then
		FILTER_DIR=$(mktemp -d)
		java -d64 -Xms512m -Xmx${TOT_MEM}m -jar /usr/share/GATK/GenomeAnalysisTK-3.2-2.jar \
		-T VariantFiltration \
		-nt $(nproc --all) \	
		-R /usr/share/GATK/resources/human_g1k_v37_decoy.fasta \
		-V $BASE_VCF \
		$addl_filter \
		-o $FITLER_DIR/filtered.vcf.gz
		
		BASE_VCF=$FITLER_DIR/filtered.vcf.gz
	fi
	
	OUT_DIR=$(mktemp -d)
	PREFIX=$(dx describe --name "$vcf_fn" | sed 's/\.vcf.\(gz\)*$//')
	mv $BASE_VCF $OUT_DIR/$PREFIX.filtered.vcf.gz
	mv $BASE_VCF.tbi $OUT_DIR/$PREFIX.filtered.vcf.gz.tbi
	
	vcf_out=$(dx upload $OUT_DIR/$PREFIX.filtered.vcf.gz --brief)
    vcfidx_out=$(dx upload $OUT_DIR/$PREFIX.filtered.vcf.gz.tbi --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output vcf_out "$vcf_out" --class=file
    dx-jobutil-add-output vcfidx_out "$vcfidx_out" --class=file
}
