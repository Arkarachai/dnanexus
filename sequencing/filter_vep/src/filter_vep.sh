#!/bin/bash
# filter_vep 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

export SHELL="/bin/bash"

procCount=$(nproc --all)

set -x
#set -o pipefail
# install GNU parallel!
sudo sed -i 's/^# *\(deb .*backports.*\)$/\1/' /etc/apt/sources.list
sudo apt-get update
sudo apt-get install --yes parallel

#cd /home/dnanexus/bcftools-1.3.1
#make
#make prefix=/usr/local/ install

WKDIR=$(mktemp -d)
DXVCF_LIST=$(mktemp)

cpanm Archive::Extract
cpanm File::Copy::Recursive
#
cpanm Module::Build
cpanm Archive::Zip
cpanm Bundle::DBI

dx download "$DX_RESOURCES_ID:/VEP/ensembl-tools-release-87.zip" -o /usr/share/ensembl-tools-release.zip
cd /usr/share/
unzip ensembl-tools-release.zip
cd ensembl-tools-release-87/scripts/variant_effect_predictor/
yes n | perl INSTALL.pl

function parallel_download_filter() {
	set -x
	cd $2
	dx download "$1"

  IN_VCF=$(dx describe "$1" --name)
  OUT_VCF=${IN_VCF%.vcf.gz}.filtered.vcf.gz
  perl /usr/share/ensembl-tools-release-87/scripts/variant_effect_predictor/filter_vep.pl -i $IN_VCF --gz --format vcf $filter_options | bgzip -c > $OUT_VCF

  tabix -p vcf $OUT_VCF

  out_vcf=$(dx upload --brief $OUT_VCF)
	out_vcf_idx=$(dx upload --brief $OUT_VCF.tbi)

  dx-jobutil-add-output out_vcf "$out_vcf" --class=array:file
  dx-jobutil-add-output out_vcf_idx "$out_vcf_idx" --class=array:file
  rm ${IN_VCF%.vcf.gz}*
	cd - >/dev/null
}
export -f parallel_download_filter

main() {

    echo "Value of in_vcf: '${in_vcf[@]}'"
    echo "Value of filter_options: '$filter_options'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    for i in "${!in_vcf[@]}"; do
      echo "${in_vcf[$i]}" >> "$DXVCF_LIST"
    done

    parallel -j $(nproc --all) -u --gnu parallel_download_filter :::: $DXVCF_LIST ::: $WKDIR

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    #dx-jobutil-add-output out_vcf "$out_vcf" --class=array:file
    #dx-jobutil-add-output out_vcf_idx "$out_vcf_idx" --class=array:file
}
