#!/bin/bash
# vcf_qc 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {
	set -x

	if test -z "$PREFIX"; then
		PREFIX="$(dx describe --name "$vcf_fn" | sed 's/\.vcf.\(gz\)*$//').subset"
	fi


	SUBJOB_ARGS="-ief:boolean=$ef -ienv:boolean=$env"
	if test "$region_file"; then
		SUBJOB_ARGS="$SUBJOB_ARGS -iregion_file:file=$(dx describe --json "$region_file" | jq -r .id)"
	fi
		
	if test "$samp_incl"; then
		SUBJOB_ARGS="$SUBJOB_ARGS -isamp_incl:file=$(dx describe --json "$samp_incl" | jq -r .id)"
	fi
	
	if test "$samp_excl"; then
		SUBJOB_ARGS="$SUBJOB_ARGS -isamp_excl:file=$(dx describe --json "$samp_excl" | jq -r .id)"
	fi
	
	if test "$concat_vcf"; then
		SUBJOB_ARGS="$SUBJOB_ARGS -iconcat_vcf:file=$(dx describe --json "$concat_vcf" | jq -r .id)"
	fi
	
	if test "$EXTRA_CMD"; then
		SUBJOB_ARGS="$SUBJOB_ARGS -iEXTRA_CMD:string=$EXTRA_CMD"
	fi

	# download the tabix index
	dx download "$vcfidx_fn" -o raw.vcf.gz.tbi
	
	# get a list of chromosomes and run SelectVariants on the chromosomes independently
	CONCAT_ARGS="-iprefix=$PREFIX"
	for CHR in $(tabix -l raw.vcf.gz); do
		SUBJOBID=$(eval dx-jobutil-new-job run_sv -ivcf_fn:file=$(dx describe --json "$vcf_fn" | jq -r .id) -ivcfidx_fn:file=$(dx describe --json "$vcfidx_fn" | jq -r .id) -iCHR:string="$CHR" -iPREFIX:string="$PREFIX.$CHR" "$SUBJOB_ARGS") 
		CONCAT_ARGS="$CONCAT_ARGS -ivcfs=$SUBJOBID:vcf_out -ivcfidxs=$SUBJOBID:vcfidx_out"
	done
	
	# Concatenate the results
	CONCAT_JOB=$(dx run cat_variants $CONCAT_ARGS --brief)
    dx-jobutil-add-output vcf_out "$CONCAT_JOB:vcf_out" --class=jobref
    dx-jobutil-add-output vcfidx_out "$CONCAT_JOB:vcfidx_out" --class=jobref

}


run_sv() {

	set -x

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

	WKDIR=$(mktemp -d)
	cd $WKDIR
	
	SV_ARGS=""
	if test "$region_file"; then
		REGION_FN=$(dx describe --name "$region_file");
		REGION_EXT=$(echo "$REGION_FN" | sed 's|.*\.||')
		REGION_BASE=$(echo "$REGION_FN" | sed 's|\.[^.]*$||')
		
		declare -A ext_list
		ext_list["list"]=1
		ext_list["interval_list"]=1
		ext_list["bed"]=1
		
		if [[ ${ext_list[$REGION_EXT]} ]]; then
			REGION_FN="$REGION_BASE.$REGION_EXT"
		else
			REGION_FN="$REGION_BASE.list"
		fi
		
		dx download "$region_file" -o "$REGION_FN"
		SV_ARGS="$SV_ARGS -L $PWD/$REGION_FN"
	fi
	
	if test "$ef" = "true"; then
		SV_ARGS="$SV_ARGS -ef"
	fi
	
	if test "$env" = "true"; then 
		SV_ARGS="$SV_ARGS -env"
	fi
	
	if test "$samp_incl"; then
		dx download "$samp_incl" -o samp_incl
		SV_ARGS="$SV_ARGS -sf samp_incl"
	fi
	
	if test "$samp_excl"; then
		dx download "$samp_excl" -o samp_excl
		SV_ARGS="$SV_ARGS -xl_sf samp_excl"
	fi
	
	if test "$EXTRA_CMD"; then
		SV_ARGS="$SV_ARGS $EXTRA_CMD"
	fi
	
	if test -z "$SV_ARGS" -a -z "$concord_vcf"; then
		dx-jobutil-report-error "ERROR: Nothing to do!"
	fi
	
	# get the resources we need in /usr/share/GATK
	sudo mkdir -p /usr/share/GATK/resources
	sudo chmod -R a+rwX /usr/share/GATK
	
	dx download $(dx find data --name "GenomeAnalysisTK-3.4-46.jar" --project $DX_RESOURCES_ID --brief) -o /usr/share/GATK/GenomeAnalysisTK-3.4-46.jar
	dx download $(dx find data --name "dbsnp_137.b37.vcf.gz" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/dbsnp_137.b37.vcf.gz
	dx download $(dx find data --name "dbsnp_137.b37.vcf.gz.tbi" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/dbsnp_137.b37.vcf.gz.tbi
	dx download $(dx find data --name "human_g1k_v37_decoy.fasta" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta
	dx download $(dx find data --name "human_g1k_v37_decoy.fasta.fai" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta.fai
	dx download $(dx find data --name "human_g1k_v37_decoy.dict" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/human_g1k_v37_decoy.dict


    TOT_MEM=$(free -m | grep "Mem" | awk '{print $2}')
    # only ask for 90% of total system memory
    TOT_MEM=$((TOT_MEM * 9 / 10))

	if test "$concord_vcf"; then
	
		# NOTE: This is only here because some of the VCFs may be unsorted... grumble...
		# This REALLY should just be a check for compression, then tabix if necessary
		CAT_CMD="cat"
		if test $(dx describe --name | grep '\.gz$' | wc -l) ne 0; then
			CAT_CMD="zcat"
		fi
		
		dx cat "$concord_vcf" | $CAT_CMD | vcf-sort | bgzip -c > concord_all.vcf.gz
		tabix -p vcf concord_all.vcf.gz
		
		# Restrict the concord_all.$EXT to the chromosome of interest only!
		java -d64 -Xms512m -Xmx${TOT_MEM}m -jar /usr/share/GATK/GenomeAnalysisTK-3.4-46.jar \
		-T SelectVariants \
		-nt $(nproc --all) \
		-R /usr/share/GATK/resources/human_g1k_v37_decoy.fasta \
		-V concord_all.vcf.gz -L $CHR -o concord_chr.vcf.gz
		
		SV_ARGS="$SV_ARGS -conc concord_chr.vcf.gz"
	fi	

	download_part.py -f $(dx describe --json "$vcf_fn" | jq -r .id) -i $(dx describe --json "$vcfidx_fn" | jq -r .id) -L $CHR -H -o raw.vcf.gz
	tabix -p vcf raw.vcf.gz
	
 #   dx download "$vcf_fn" -o raw.vcf.gz
 #   dx download "$vcfidx_fn" -o raw.vcf.gz.tbi
    

	OUT_DIR=$(mktemp -d)
	if test -z "$PREFIX"; then
		PREFIX="$(dx describe --name "$vcf_fn" | sed 's/\.vcf.\(gz\)*$//').subset"
	fi

	eval java -d64 -Xms512m -Xmx${TOT_MEM}m -jar /usr/share/GATK/GenomeAnalysisTK-3.4-46.jar \
		-T SelectVariants \
		-nt $(nproc --all) \
		-R /usr/share/GATK/resources/human_g1k_v37_decoy.fasta \
		-V raw.vcf.gz "$SV_ARGS" \
		-o $OUT_DIR/$PREFIX.vcf.gz
	
	vcf_out=$(dx upload $OUT_DIR/$PREFIX.vcf.gz --brief)
    vcfidx_out=$(dx upload $OUT_DIR/$PREFIX.vcf.gz.tbi --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output vcf_out "$vcf_out" --class=file
    dx-jobutil-add-output vcfidx_out "$vcfidx_out" --class=file
}
