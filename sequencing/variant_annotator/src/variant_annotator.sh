#!/bin/bash
# vcf_qc 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -x

main() {


    echo "Value of vcf_fn: '$vcf_fn'"
    echo "Value of vcfidx_fn: '$vcfidx_fn'"
    echo "Value of hdr_only: '$hdr_only'"
    echo "Value of no_geno: '$no_geno'"
    echo "Value of cmd_params: '$cmd_params'"

	if test "$no_geno" = "true" -a "$hdr_only" = "false"; then
		dx-jobutil-report-error "ERROR: No output requested, nothing to do!"
	fi

	# Sanity check - make sure vcf + vcfidx have same # of elements
	if test "${#vcfidx_fn[@]}" -ne "${#vcf_fn[@]}"; then
		dx-jobutil-report-error "ERROR: Number of VCFs and VCF indexes do NOT match!"
	fi

	# first, we need to match up the VCF and tabix index files
	# To do that, we'll get files of filename -> dxfile ID
	VCF_LIST=$(mktemp)
	for i in "${!vcf_fn[@]}"; do	
		dx describe --json "${vcf_fn[$i]}" | jq -r ".name,.id" | tr '\n' '\t' | sed 's/\t$/\n/' >> $VCF_LIST
	done
	
	VCFIDX_LIST=$(mktemp)
	for i in "${!vcfidx_fn[@]}"; do	
		dx describe --json "${vcfidx_fn[$i]}" | jq -r ".name,.id" | tr '\n' '\t' | sed -e 's/\t$/\n/' -e 's/\.tbi\t/\t/' >> $VCFIDX_LIST
	done
	
	# Now, get the prefix (strip off any .tbi) and join them
	JOINT_LIST=$(mktemp)
	join -t$'\t' -j1 <(sort -k1,1 $VCF_LIST) <(sort -k1,1 $VCFIDX_LIST) > $JOINT_LIST
		
	# Ensure that we still have the same number of files; throw an error if not
	if test $(cat $JOINT_LIST | wc -l) -ne "${#vcf_fn[@]}"; then
		dx-jobutil-report-error "ERROR: VCF files and indexes do not match!"
	fi
	
	# and loop through the file, submitting sub-jobs
	while read VCF_LINE; do
		VCF_DXFN=$(echo "$VCF_LINE" | cut -f2)
		VCFIDX_DXFN=$(echo "$VCF_LINE" | cut -f3)		
	
		SUBJOB=$(dx-jobutil-new-job run_anno -ivcf_fn:file="$VCF_DXFN" -ivcfidx_fn:file="$VCFIDX_DXFN" -icmd_params:string="$cmd_params" -ihdr_only:boolean=$hdr_only -ino_geno:boolean=$no_geno)
		if test "$no_geno" = "false"; then
			# for each subjob, add the output to our array
    		dx-jobutil-add-output vcf_out --array "$SUBJOB:vcf_out" --class=jobref
		    dx-jobutil-add-output vcfidx_out --array "$SUBJOB:vcfidx_out" --class=jobref
	   	fi
	   	if test "$hdr_only" = "true"; then
			# for each subjob, add the output to our array
    		dx-jobutil-add-output vcf_hdr_out --array "$SUBJOB:vcf_hdr_out" --class=jobref
		    dx-jobutil-add-output vcfidx_hdr_out --array "$SUBJOB:vcfidx_hdr_out" --class=jobref
	   	fi
		
	done < $JOINT_LIST
	
}


run_anno() {

    echo "Value of vcf_fn: '$vcf_fn'"
    echo "Value of vcfidx_fn: '$vcfidx_fn'"
    echo "Value of hdr_only: '$hdr_only'"
    echo "Value of no_geno: '$no_geno'"
    echo "Value of cmd_params: '$cmd_params'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

	SITES_FLAG=""
	if test "$hdr_only" = "true" -a "$no_geno" = "true"; then
		SITES_FLAG="--sites_only"
	fi

    dx download "$vcf_fn" -o raw.vcf.gz
    dx download "$vcfidx_fn" -o raw.vcf.gz.tbi
    
	# get the resources we need in /usr/share/GATK
	sudo mkdir -p /usr/share/GATK/resources
	sudo chmod -R a+rwX /usr/share/GATK
	
		
	dx download "$DX_RESOURCES_ID:/GATK/jar/GenomeAnalysisTK-3.4-46.jar" -o /usr/share/GATK/GenomeAnalysisTK-3.4-46.jar
	dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.fasta" -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta
	dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.fasta.fai" -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta.fai
	dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.dict" -o /usr/share/GATK/resources/human_g1k_v37_decoy.dict


    TOT_MEM=$(free -m | grep "Mem" | awk '{print $2}')
    # only ask for 90% of total system memory
    TOT_MEM=$((TOT_MEM * 9 / 10))

	BASE_VCF=raw.vcf.gz
		
	OUT_DIR=$(mktemp -d)
	PREFIX=$(dx describe --name "$vcf_fn" | sed 's/\.vcf.\(gz\)*$//')

	eval java -d64 -Xms512m -Xmx${TOT_MEM}m -jar /usr/share/GATK/GenomeAnalysisTK-3.4-46.jar -T VariantAnnotator -nt $(nproc --all) -R /usr/share/GATK/resources/human_g1k_v37_decoy.fasta -V $BASE_VCF "$cmd_params" $SITES_FLAG -o "$OUT_DIR/$PREFIX.annotated.vcf.gz"

	if test "$hdr_only" = "true"; then
		if test "$no_geno" = "true"; then
			mv $OUT_DIR/$PREFIX.annotated.vcf.gz $OUT_DIR/header.$PREFIX.annotated.vcf.gz
			mv $OUT_DIR/$PREFIX.annotated.vcf.gz.tbi $OUT_DIR/header.$PREFIX.annotated.vcf.gz.tbi
		else
			pigz -dc $OUT_DIR/$PREFIX.annotated.vcf.gz | cut -f1-8 | bgzip -c > "$OUT_DIR/header.$PREFIX.annotated.vcf.gz"
			tabix -p vcf "$OUT_DIR/header.$PREFIX.annotated.vcf.gz"
		fi		
	fi

	if test "$no_geno" = "false"; then
		vcf_out=$(dx upload "$OUT_DIR/$PREFIX.annotated.vcf.gz" --brief)
    	vcfidx_out=$(dx upload "$OUT_DIR/$PREFIX.annotated.vcf.gz.tbi" --brief)
		dx-jobutil-add-output vcf_out "$vcf_out" --class=file
	    dx-jobutil-add-output vcfidx_out "$vcfidx_out" --class=file
	fi
	
	if test "$hdr_only" = "true"; then
		vcf_hdr_out=$(dx upload "$OUT_DIR/header.$PREFIX.annotated.vcf.gz" --brief)
    	vcfidx_hdr_out=$(dx upload "$OUT_DIR/header.$PREFIX.annotated.vcf.gz.tbi" --brief)
		dx-jobutil-add-output vcf_hdr_out "$vcf_hdr_out" --class=file
	    dx-jobutil-add-output vcfidx_hdr_out "$vcfidx_hdr_out" --class=file
	fi
}
