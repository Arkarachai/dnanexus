#!/bin/bash
# combine_variants 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

# install GNU parallel!
sudo sed -i 's/^# *\(deb .*backports.*\)$/\1/' /etc/apt/sources.list
sudo apt-get update
sudo apt-get install --yes parallel

set -x

function download_resources() {

	# get the resources we need in /usr/share/GATK
	sudo mkdir -p /usr/share/GATK/resources
	sudo chmod -R a+rwX /usr/share/GATK

	dx download $(dx find data --name "GenomeAnalysisTK-3.4-46-custom.jar" --project $DX_RESOURCES_ID --brief) -o /usr/share/GATK/GenomeAnalysisTK-3.4-46-custom.jar
	dx download $(dx find data --name "human_g1k_v37_decoy.fasta" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta
	dx download $(dx find data --name "human_g1k_v37_decoy.fasta.fai" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/human_g1k_v37_decoy.fasta.fai
	dx download $(dx find data --name "human_g1k_v37_decoy.dict" --project $DX_RESOURCES_ID --folder /resources --brief) -o /usr/share/GATK/resources/human_g1k_v37_decoy.dict
	
}

function parallel_download() {
	set -x
	cd $2
	dx download "$(dx describe --json "$1" | jq -r .id)"
	cd - >/dev/null
}
export -f parallel_download

function dl_index() {
	#set -x
	cd "$2"
	fn=$(dx describe --name "$1")
	dx download "$1" -o "$fn"
	if test -z "$(ls $fn.tbi)"; then
		tabix -p vcf $fn
	fi
	echo "$2/$fn" >> $3
}
export -f dl_index

main() {

    echo "Value of vcfs: '${vcfs[@]}'"
    echo "Value of vcfidxs: '${vcfidxs[@]}'"
    echo "Value of prefix: '$prefix'"
    
    if test -z "$prefix"; then
    	prefix="combined"
    else
    	prefix=$(echo "$prefix" | sed 's|/|_|g')
    fi

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

	echo "Resources: $DX_RESOURCES_ID"
	# set the shell to work w/ GNU parallel
	export SHELL="/bin/bash"

	# Arguments:
	# gvcfidxs (optional)
	# array of files, each containing a "dx download"-able file, one per line
	# and the files are tbi indexes of the gvcf.gz files
	# gvcfs (mandatory)
	# array of files, as above, where each line is a single gvcf file
	# PREFIX (mandatory)
	# the prefix to use for the single resultant gvcf

	download_resources
	
	# download my gvcfidx_list
	DX_VCFIDX_LIST=$(mktemp)
	WKDIR=$(mktemp -d)

	for i in "${!vcfidxs[@]}"; do	
		echo "${vcfidxs[$i]}" >> $DX_VCFIDX_LIST
	done
	
	cd $WKDIR
	
	parallel -u --gnu -j $(nproc --all) parallel_download :::: $DX_VCFIDX_LIST ::: $WKDIR
	
	# OK, now all of the gvcf indexes are in $WKDIR, time to download
	# all of the GVCFs in parallel
	DX_VCF_LIST=$(mktemp)
	for i in "${!vcfs[@]}"; do	
		echo "${vcfs[$i]}" >> $DX_VCF_LIST
	done
	
	# download (and index if necessary) all of the gVCFs
	VCF_LIST=$(mktemp)	
	parallel -u --gnu -j $(nproc --all) dl_index :::: $DX_VCF_LIST ::: $WKDIR ::: $VCF_LIST
	
	# Now, merge the gVCFs into a single gVCF
	FINAL_DIR=$(mktemp -d)
	TOT_MEM=$(free -m | grep "Mem" | awk '{print $2}')
	java -d64 -Xms512m -Xmx$((TOT_MEM * 9 / 10))m  -cp /usr/share/GATK/GenomeAnalysisTK-3.4-46-custom.jar org.broadinstitute.gatk.tools.CatVariants \
    -R /usr/share/GATK/resources/human_g1k_v37_decoy.fasta \
    $(cat $VCF_LIST | sed 's/^/-V /' | tr '\n' ' ') \
	-out $FINAL_DIR/$prefix.vcf.gz
	
	# and upload it and we're done!
	DX_VCF_UPLOAD=$(dx upload "$FINAL_DIR/$prefix.vcf.gz" --brief)
	DX_VCFIDX_UPLOAD=$(dx upload "$FINAL_DIR/$prefix.vcf.gz.tbi" --brief)
	
	dx-jobutil-add-output vcf_out $DX_VCF_UPLOAD --class=file
	dx-jobutil-add-output vcfidx_out $DX_VCFIDX_UPLOAD --class=file


}
