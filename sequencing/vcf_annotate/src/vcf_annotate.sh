#!/bin/bash
# vcf_annotate 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -x
set -o pipefail

main() {

    echo "Value of vcf_fn: '$vcf_fn'"
    echo "Value of vcfidx_fn: '$vcfidx_fn'"
    echo "Value of prefix: '$prefix'"
    
    FN=$(dx describe --name "$vcf_fn")
    if test -z "$prefix"; then
    
    	prefix="$(echo "$FN" | sed 's/\.vcf\(\.gz\)*$//').annotated"
    fi

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

	# Download the necessary files for snpEff
	sudo mkdir -p /usr/share/snpEff/data
	sudo chmod -R a+rwx /usr/share/snpEff
	dx download $(dx find data --name "snpEff-4.1l.jar" --project $DX_RESOURCES_ID --brief) -o /usr/share/snpEff/snpEff-4.1l.jar
	dx download -r "$DX_RESOURCES_ID:/snpEff/datasets/GRCh37.75" -o /usr/share/snpEff/data/
	dx download -r "$DX_RESOURCES_ID:/snpEff/snpEff.config" -o /usr/share/snpEff/snpEff.config

	WKDIR=$(mktemp -d)
	OUTDIR=$(mktemp -d)
	cd $WKDIR
	
	cat_cmd="cat"
	if test "$(echo "$FN" | grep '\.gz$')"; then
		cat_cmd="zcat"
	fi
	
    TOT_MEM=$(free -m | grep "Mem" | awk '{print $2}')
    # only ask for 90% of total system memory
    TOT_MEM=$((TOT_MEM * 9 / 10))

	dx cat "$vcf_fn" | $cat_cmd | java -d64 -Xms512m -Xmx${TOT_MEM}m -jar /usr/share/snpEff/snpEff-4.1l.jar \
		-c /usr/share/snpEff/snpEff.config GRCh37.75 - | bgzip -c > $OUTDIR/$prefix.vcf.gz
	
	tabix -p vcf $OUTDIR/$prefix.vcf.gz
	
    vcf_out=$(dx upload $OUTDIR/$prefix.vcf.gz --brief)
    vcfidx_out=$(dx upload $OUTDIR/$prefix.vcf.gz.tbi --brief)

    dx-jobutil-add-output vcf_out "$vcf_out" --class=file
    dx-jobutil-add-output vcfidx_out "$vcfidx_out" --class=file
}
