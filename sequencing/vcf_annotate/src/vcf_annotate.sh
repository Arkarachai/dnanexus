#!/bin/bash
# vcf_annotate 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.
export SHELL="/bin/bash"
set -x
#set -o pipefail

# install GNU parallel!
sudo sed -i 's/^# *\(deb .*backports.*\)$/\1/' /etc/apt/sources.list
sudo apt-get update
sudo apt-get install --yes parallel

cd /home/dnanexus/bcftools-1.3.1
make
make prefix=/usr/local/ install


WKDIR=$(mktemp -d)
DXVCF_LIST=$(mktemp)
DXIDX_LIST=$(mktemp)

cd $WKDIR

function parallel_download() {
	#set -x
	cd $2
	dx download "$1"
	cd - >/dev/null
}
export -f parallel_download

function download_resources(){

	cd $WKDIR

	if test "$VEP" = "true"; then

		cpanm Archive::Extract
		cpanm File::Copy::Recursive
		#
		cpanm Module::Build
		cpanm Archive::Zip
		cpanm Bundle::DBI

		dx download "$DX_RESOURCES_ID:/VEP/ensembl-tools-release-87.zip" -o /usr/share/ensembl-tools-release.zip
		cd /usr/share/
		unzip ensembl-tools-release.zip
		cd ensembl-tools-release-87/scripts/variant_effect_predictor/
		yes n | perl INSTALL.pl

		dx download "$DX_RESOURCES_ID:/VEP/vep_b38.tar.gz" -o $HOME/vep_b38.tar.gz
		cd $HOME

		tar -xzvf vep_b38.tar.gz

		sudo mkdir -p /usr/share/GATK/resources
		sudo chmod -R a+rwX /usr/share/GATK

		dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.fasta" -o /usr/share/GATK/resources/build.fasta
		dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.fasta.fai" -o /usr/share/GATK/resources/build.fasta.fai
		dx download "$DX_RESOURCES_ID:/GATK/resources/human_g1k_v37_decoy.dict" -o /usr/share/GATK/resources/build.dict

	fi

	cd $WKDIR

	if test "$dbnsfp" = "true"; then


		dx download "$DX_RESOURCES_ID:/dbNSFP/3.x/dbNSFP3.3a.vcf.gz" -o dbNSFP.vcf.gz
		dx download "$DX_RESOURCES_ID:/dbNSFP/3.x/dbNSFP3.3a.vcf.gz.tbi" -o dbNSFP.vcf.gz.tbi
		dx download "$DX_RESOURCES_ID:/dbNSFP/3.x/dbNSFP3.3a_header.txt" -o dbNSFP_header.txt
	fi

	if test "$HGMD" = "true"; then


		dx download "$DX_RESOURCES_ID:/HGMD/HGMD_PRO_2016.4_hg38.vcf.gz" -o HGMD.vcf.gz
		dx download "$DX_RESOURCES_ID:/HGMD/HGMD_PRO_2016.4_hg38.vcf.gz.tbi" -o HGMD.vcf.gz.tbi
		dx download "$DX_RESOURCES_ID:/dbNSFP/3.x/dbNSFP3.3a_header.txt" -o HGMD_header.txt
	fi

	if test "$clinvar" = "true"; then

		dx download "$DX_RESOURCES_ID:/CLINVAR/variant_summary.Jan2017.b38.vcf.gz" -o variant_summary.vcf.gz
		dx download "$DX_RESOURCES_ID:/CLINVAR/variant_summary.Jan2017.b38.vcf.gz.tbi" -o variant_summary.vcf.gz.tbi
		dx download "$DX_RESOURCES_ID:/CLINVAR/ClinVar_Jan2017_header.txt" -o ClinVar_header.txt
	fi
}
export -f download_resources

function parallel_download_and_annotate() {
	#set -x
	cd $2
	dx download "$1"
	cd - >/dev/null

	IN_VCF=$(dx describe "$1" --name)

	OUT_VCF=$IN_VCF

	if test "$VEP" = "true"; then

		OUT_VCF=${IN_VCF%.vcf.gz}.VEP.u.vcf

		perl /usr/share/ensembl-tools-release-87/scripts/variant_effect_predictor/variant_effect_predictor.pl -i $IN_VCF --everything --cache --offline --vcf --fasta /usr/share/GATK/resources/build.fasta --merged -o $OUT_VCF

		rm $IN_VCF

		vcf-sort -h

		vcf-sort $OUT_VCF | bgzip > ${OUT_VCF%.u.vcf}.vcf.gz

		rm $OUT_VCF

		OUT_VCF=${OUT_VCF%.u.vcf}.vcf.gz


	fi

	# add HGMD here
	if test "$dbnsfp" = "true"; then

		IN_VCF=$OUT_VCF
		tabix -p vcf -f $IN_VCF

		OUT_VCF=${IN_VCF%.vcf.gz}.HGMD.vcf.gz

		echo "HGMD"
		echo $OUT_VCF
		echo $IN_VCF

		bcftools annotate -a HGMD.vcf.gz -o $OUT_VCF -Oz $IN_VCF -c INFO/CLASS,INFO/MUT,INFO/GENE,INFO/STRAND,INFO,DNA,INFO/PROT,INFO/DB,INFO/PHEN -h HGMD_header.txt

		rm $IN_VCF

	fi




	# Add dbNSFP here (3.3a)
	if test "$dbnsfp" = "true"; then

		IN_VCF=$OUT_VCF
		tabix -p vcf -f $IN_VCF

		OUT_VCF=${IN_VCF%.vcf.gz}.dbNSFP.vcf.gz

		echo "dbnsfp"
		echo $OUT_VCF
		echo $IN_VCF

		bcftools annotate -a dbNSFP.vcf.gz -o $OUT_VCF -Oz $IN_VCF  -c INFO/dbNSFP -h dbNSFP_header.txt

		rm $IN_VCF

	fi

	# Add CLINVAR here
	if test "$clinvar" = "true"; then

		IN_VCF=$OUT_VCF
		tabix -p vcf -f $IN_VCF

		OUT_VCF=${OUT_VCF%.vcf.gz}.ClinVar.vcf.gz

		echo "clinvar"
		echo $OUT_VCF
		echo $IN_VCF


		bcftools annotate -a variant_summary.vcf.gz -o $OUT_VCF -Oz $IN_VCF  -c INFO/ClinVar.TSV.Jan2017 -h ClinVar_header.txt
		tabix -p vcf -f $OUT_VCF

		rm $IN_VCF


	fi

	VCF_UP=$(dx upload --brief $OUT_VCF)
	IDX_UP=$(dx upload --brief $OUT_VCF.tbi)

	dx-jobutil-add-output vcf_out "$VCF_UP" --class=array:file
	dx-jobutil-add-output vcfidx_out "$IDX_UP" --class=array:file

	TO_RM=$(dx describe "$1" --name)

	rm ${TO_RM%.vcf.gz}.*


}
export -f parallel_download_and_annotate




main() {

	export SHELL="/bin/bash"



	cd $HOME

    echo "Value of vcf_fn: '$vcf_fn'"
    echo "Value of vcfidx_fn: '$vcfidx_fn'"


		cd $WKDIR

    # Download the VCF index files (in parallel)
    for i in "${!vcfidx_fn[@]}"; do
      echo "${vcfidx_fn[$i]}" >> "$DXIDX_LIST"
    done

    parallel -j $(nproc --all) -u --gnu parallel_download :::: $DXIDX_LIST ::: $WKDIR

		download_resources





    echo "IDX downloaded"

		# Download the VCF index files (in parallel)
    for i in "${!vcf_fn[@]}"; do
      echo "${vcf_fn[$i]}" >> $DXVCF_LIST
    done

    parallel -j $(nproc --all) -u --gnu parallel_download_and_annotate :::: $DXVCF_LIST ::: $WKDIR

    echo "VCF downloaded"


    #vcf_out=$(dx upload $OUT_VCF --brief)
    #vcfidx_out=$(dx upload $OUT_VCF.tbi --brief)

    #dx-jobutil-add-output vcf_out "$vcf_out" --class=file
    #dx-jobutil-add-output vcfidx_out "$vcfidx_out" --class=file


}
